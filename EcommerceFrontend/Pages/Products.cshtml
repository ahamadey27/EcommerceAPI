@page
@model ProductsModel
@{
    ViewData["Title"] = "Products";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Products</h2>
    <div class="auth-admin">
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addProductModal">
            Add Product
        </button>
    </div>
</div>

<div id="alert-container"></div>

<div class="row" id="products-container">
    <div class="col-12 text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading products...</p>
    </div>
</div>

<!-- Add Product Modal (Admin only) -->
<div class="modal fade" id="addProductModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="add-product-form">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="productName" required>
                    </div>
                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="productDescription" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="productPrice" class="form-label">Price</label>
                        <input type="number" class="form-control" id="productPrice" step="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label for="productCategory" class="form-label">Category</label>
                        <input type="text" class="form-control" id="productCategory" required>
                    </div>
                    <div class="mb-3">
                        <label for="productStock" class="form-label">Stock Quantity</label>
                        <input type="number" class="form-control" id="productStock" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="save-product-btn">Save Product</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let products = [];
        
        document.addEventListener('DOMContentLoaded', async function() {
            showForAuth('.auth-user');
            await loadProducts();
        });
        
        async function loadProducts() {
            try {
                products = await API.getProducts();
                displayProducts();
            } catch (error) {
                console.error('Error loading products:', error);
                showAlert('Error loading products', 'danger');
            }
        }
        
        function displayProducts() {
            const container = document.getElementById('products-container');
            
            if (products.length === 0) {
                container.innerHTML = `
                    <div class="col-12 text-center">
                        <p>No products available</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = products.map(product => `
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">${product.name}</h5>
                            <p class="card-text">${product.description}</p>
                            <p class="card-text"><small class="text-muted">${product.category}</small></p>
                            <p class="card-text"><strong>$${product.price.toFixed(2)}</strong></p>
                            <p class="card-text"><small>Stock: ${product.stockQuantity}</small></p>
                        </div>
                        <div class="card-footer">
                            <div class="auth-user">
                                <button class="btn btn-primary btn-sm" onclick="addToCart(${product.id})" 
                                        ${product.stockQuantity === 0 ? 'disabled' : ''}>
                                    ${product.stockQuantity === 0 ? 'Out of Stock' : 'Add to Cart'}
                                </button>
                            </div>
                            <div class="auth-guest">
                                <small class="text-muted">Login to add to cart</small>
                            </div>
                        </div>
                    </div>
                </div>            `).join('');
            
            showForAuth('.auth-user');
            showForGuest('.auth-guest');
            showForAdmin('.auth-admin');
        }
          async function addToCart(productId) {
            // Check if user is authenticated
            if (!getToken()) {
                showAlert('Please login to add items to cart', 'warning');
                return;
            }
            
            try {
                const response = await API.addToCart(productId, 1);
                console.log('Add to cart response:', response);
                showAlert('Product added to cart!', 'success');
                updateCartCount();
            } catch (error) {
                console.error('Error adding to cart:', error);
                if (error.message === 'Authentication required') {
                    showAlert('Please login to add items to cart', 'warning');
                } else {
                    showAlert('Error adding product to cart', 'danger');
                }
            }
        }
        
        // Save product (Admin only)
        document.getElementById('save-product-btn').addEventListener('click', async function() {
            const form = document.getElementById('add-product-form');
            const formData = new FormData(form);
            
            const product = {
                name: document.getElementById('productName').value,
                description: document.getElementById('productDescription').value,
                price: parseFloat(document.getElementById('productPrice').value),
                category: document.getElementById('productCategory').value,
                stockQuantity: parseInt(document.getElementById('productStock').value)
            };
            
            try {
                const response = await apiCall('/products', {
                    method: 'POST',
                    body: JSON.stringify(product)
                });
                
                if (response.ok) {
                    showAlert('Product added successfully!', 'success');
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
                    modal.hide();
                    form.reset();
                    await loadProducts();
                } else {
                    showAlert('Error adding product', 'danger');
                }
            } catch (error) {
                console.error('Error adding product:', error);
                showAlert('Error adding product', 'danger');
            }
        });
        
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alert-container');
            alertContainer.innerHTML = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Auto-dismiss success alerts
            if (type === 'success') {
                setTimeout(() => {
                    const alert = alertContainer.querySelector('.alert');
                    if (alert) {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }
                }, 3000);
            }
        }
    </script>
}
