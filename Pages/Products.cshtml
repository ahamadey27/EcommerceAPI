@page
@model ProductsModel
@{
    ViewData["Title"] = "Products";
}

<h1>Our Products</h1>
<p>Discover amazing products at unbeatable prices.</p>

<div class="auth-admin">
    <button id="add-product-btn">Add Product</button>
</div>

<div id="alert-container"></div>
<div id="products-container">
    <p>Loading products...</p>
</div>

<!-- Add Product Modal (Admin only) -->
<div id="addProductModal" style="display:none;">
    <h2>Add New Product</h2>
    <form id="add-product-form">
        <label for="productName">Name</label><br>
        <input type="text" id="productName" required><br>
        <label for="productDescription">Description</label><br>
        <textarea id="productDescription" rows="3" required></textarea><br>
        <label for="productPrice">Price</label><br>
        <input type="number" id="productPrice" step="0.01" required><br>
        <label for="productCategory">Category</label><br>
        <input type="text" id="productCategory" required><br>
        <button type="submit">Add</button>
    </form>
    <button id="close-modal">Close</button>
</div>

@section Scripts {
    <script>
        let products = [];
        
        document.addEventListener('DOMContentLoaded', async function() {
            showForAuth('.auth-user');
            await loadProducts();
        });
        
        async function loadProducts() {
            try {
                products = await API.getProducts();
                displayProducts();
            } catch (error) {
                console.error('Error loading products:', error);
                showAlert('Error loading products', 'danger');
            }
        }
          function displayProducts() {
            const container = document.getElementById('products-container');
            
            if (products.length === 0) {
                container.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No products available</h4>
                        <p class="text-muted">Check back later for new products!</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = products.map(product => `
                <div class="product-card fade-in">
                    <div class="card h-100">
                        <div class="card-img-container" style="height: 200px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
                            <i class="fas fa-box fa-3x text-white opacity-75"></i>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">${product.name}</h5>
                            <p class="card-text text-muted flex-grow-1">${product.description}</p>
                            <div class="mb-2">
                                <span class="badge bg-secondary">${product.category}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="product-price">${formatPrice(product.price)}</span>
                                <small class="text-muted">
                                    <i class="fas fa-box me-1"></i>Stock: ${product.stockQuantity}
                                </small>
                            </div>
                            <div class="auth-user">
                                <button class="btn btn-primary w-100" onclick="addToCart(${product.id})" 
                                        ${product.stockQuantity === 0 ? 'disabled' : ''}>
                                    <i class="fas fa-shopping-cart me-2"></i>
                                    ${product.stockQuantity === 0 ? 'Out of Stock' : 'Add to Cart'}
                                </button>
                            </div>
                            <div class="auth-guest">
                                <button class="btn btn-outline-primary w-100" onclick="window.location.href='/Login'">
                                    <i class="fas fa-sign-in-alt me-2"></i>Login to Purchase
                                </button>
                            </div>
                            <div class="auth-admin mt-2">
                                <button class="btn btn-danger w-100" onclick="deleteProduct(${product.id})">
                                    <i class="fas fa-trash me-2"></i>Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>            `).join('');
            
            showForAuth('.auth-user');
            showForGuest('.auth-guest');
            showForAdmin('.auth-admin');
        }
          async function addToCart(productId) {
            // Check if user is authenticated
            if (!getToken()) {
                showAlert('Please login to add items to cart', 'warning');
                return;
            }
            
            try {
                const response = await API.addToCart(productId, 1);
                console.log('Add to cart response:', response);
                showAlert('Product added to cart!', 'success');
                updateCartCount();
            } catch (error) {
                console.error('Error adding to cart:', error);
                if (error.message === 'Authentication required') {
                    showAlert('Please login to add items to cart', 'warning');
                } else {
                    showAlert('Error adding product to cart', 'danger');
                }
            }
        }
        
        // Save product (Admin only)
        document.getElementById('save-product-btn').addEventListener('click', async function() {
            const form = document.getElementById('add-product-form');
            const formData = new FormData(form);
            
            const product = {
                name: document.getElementById('productName').value,
                description: document.getElementById('productDescription').value,
                price: parseFloat(document.getElementById('productPrice').value),
                category: document.getElementById('productCategory').value,
                stockQuantity: parseInt(document.getElementById('productStock').value)
            };
            
            try {
                const response = await apiCall('/products', {
                    method: 'POST',
                    body: JSON.stringify(product)
                });
                
                if (response.ok) {
                    showAlert('Product added successfully!', 'success');
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
                    modal.hide();
                    form.reset();
                    await loadProducts();
                } else {
                    showAlert('Error adding product', 'danger');
                }
            } catch (error) {
                console.error('Error adding product:', error);
                showAlert('Error adding product', 'danger');
            }
        });
        
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alert-container');
            alertContainer.innerHTML = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Auto-dismiss success alerts
            if (type === 'success') {
                setTimeout(() => {
                    const alert = alertContainer.querySelector('.alert');
                    if (alert) {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }
                }, 3000);
            }
        }

        window.deleteProduct = async function(productId) {
            if (!getToken()) {
                showAlert('You must be logged in as admin to delete products.', 'danger');
                return;
            }
            if (!confirm('Are you sure you want to delete this product?')) return;
            try {
                const response = await fetch(`/api/products/${productId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': 'Bearer ' + getToken(),
                        'Content-Type': 'application/json'
                    }
                });
                if (response.ok) {
                    showAlert('Product deleted successfully!', 'success');
                    await loadProducts();
                } else {
                    showAlert('Failed to delete product.', 'danger');
                }
            } catch (error) {
                showAlert('Error deleting product.', 'danger');
            }
        }
    </script>
}
