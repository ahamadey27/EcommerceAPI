@page
@model CartModel
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container">
    <div class="row">
        <div class="col-12">
            <h2 class="fade-in mb-4"><i class="fas fa-shopping-cart me-2"></i>Shopping Cart</h2>
        </div>
    </div>

    <div id="alert-container"></div>

    <div class="auth-guest">
        <div class="alert alert-info slide-up">
            <i class="fas fa-info-circle me-2"></i>
            <p class="mb-0">Please <a href="/Login" class="alert-link">login</a> to view your shopping cart.</p>
        </div>
    </div>

    <div class="auth-user">
        <div id="cart-container">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading cart...</span>
                </div>
                <p class="mt-3">Loading your cart...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let cart = null;
        
        document.addEventListener('DOMContentLoaded', async function() {
            showForAuth('.auth-user');
            showForGuest('.auth-guest');
            
            if (isLoggedIn()) {
                await loadCart();
            }
        });
        
        async function loadCart() {
            try {
                cart = await API.getCart();
                displayCart();            } catch (error) {
                console.error('Error loading cart:', error);
                document.getElementById('cart-container').innerHTML = `
                    <div class="alert alert-warning">
                        <p>Error loading cart. Please try again.</p>
                    </div>
                `;
            }
        }          function displayCart() {
            const container = document.getElementById('cart-container');
            
            if (!cart || !cart.items || !Array.isArray(cart.items) || cart.items.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-5 fade-in">
                        <i class="fas fa-shopping-cart fa-4x text-muted mb-3"></i>
                        <h4 class="text-muted">Your cart is empty</h4>
                        <p class="text-muted mb-4">Start shopping to add items to your cart!</p>
                        <a href="/Products" class="btn btn-primary btn-lg">
                            <i class="fas fa-shopping-bag me-2"></i>Browse Products
                        </a>
                    </div>
                `;
                return;
            }
            
            const cartItems = cart.items.map(item => `
                <div class="cart-item slide-up">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="product-icon me-3" style="width: 60px; height: 60px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 0.5rem; display: flex; align-items: center; justify-content: center;">
                                    <i class="fas fa-box text-white"></i>
                                </div>
                                <div>
                                    <h5 class="mb-1">${item.productName}</h5>
                                    <p class="text-muted mb-0">${formatPrice(item.productPrice)} each</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="input-group">
                                <button class="btn btn-outline-primary" type="button" 
                                        onclick="updateQuantity(${item.productId}, ${item.quantity - 1})"
                                        ${item.quantity <= 1 ? 'disabled' : ''}>
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="text" class="form-control text-center fw-bold" value="${item.quantity}" readonly>
                                <button class="btn btn-outline-primary" type="button" 
                                        onclick="updateQuantity(${item.productId}, ${item.quantity + 1})">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-2 text-center">
                            <span class="h5 text-success mb-0">${formatPrice(item.productPrice * item.quantity)}</span>
                        </div>
                        <div class="col-md-1 text-center">
                            <button class="btn btn-outline-danger btn-sm" onclick="removeFromCart(${item.productId})" 
                                    title="Remove item">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
            
            const total = cart.items.reduce((sum, item) => sum + (item.productPrice * item.quantity), 0);
            const itemCount = cart.items.reduce((sum, item) => sum + item.quantity, 0);
            
            container.innerHTML = `
                <div class="row">
                    <div class="col-lg-8">
                        <div class="cart-items-container">
                            <h4 class="mb-4">
                                <i class="fas fa-shopping-cart me-2"></i>
                                Cart Items (${itemCount} ${itemCount === 1 ? 'item' : 'items'})
                            </h4>
                            ${cartItems}
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="cart-summary">
                            <h4 class="mb-4">
                                <i class="fas fa-receipt me-2"></i>Order Summary
                            </h4>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Subtotal (${itemCount} items):</span>
                                <span>${formatPrice(total)}</span>
                            </div>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Shipping:</span>
                                <span class="text-success">Free</span>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between mb-4">
                                <strong>Total:</strong>
                                <strong class="h4 text-success">${formatPrice(total)}</strong>
                            </div>
                            <button class="btn btn-success btn-lg w-100 mb-3" onclick="proceedToCheckout()">
                                <i class="fas fa-credit-card me-2"></i>Proceed to Checkout
                            </button>
                            <button class="btn btn-outline-primary w-100" onclick="window.location.href='/Products'">
                                <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                            </button>
                        </div>
                    </div>
                </div>
            `;
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-12 text-end">
                                <a href="/Products" class="btn btn-outline-primary">Continue Shopping</a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        async function updateQuantity(productId, newQuantity) {
            if (newQuantity < 1) {
                await removeFromCart(productId);
                return;
            }
            
            try {
                await API.updateCartItem(productId, newQuantity);
                await loadCart();
                updateCartCount();
                showAlert('Cart updated!', 'success');
            } catch (error) {
                console.error('Error updating cart:', error);
                showAlert('Error updating cart', 'danger');
            }
        }
        
        async function removeFromCart(productId) {
            try {
                await API.removeFromCart(productId);
                await loadCart();
                updateCartCount();
                showAlert('Item removed from cart!', 'success');
            } catch (error) {
                console.error('Error removing item:', error);
                showAlert('Error removing item from cart', 'danger');
            }
        }        async function proceedToCheckout() {
            try {
                console.log('Starting simplified checkout process...');
                
                // Get cart total and item count for confirmation
                const totalAmount = cart.items.reduce((sum, item) => sum + (item.productPrice * item.quantity), 0);
                const totalItems = cart.items.reduce((sum, item) => sum + item.quantity, 0);
                
                // Show confirmation dialog
                const confirmed = confirm(`Proceed with checkout?\n\nTotal Items: ${totalItems}\nTotal Amount: $${totalAmount.toFixed(2)}\n\nNote: This is a demo - no actual payment will be processed.`);
                
                if (!confirmed) {
                    return;
                }
                
                // Simulate order processing
                showAlert('Processing order...', 'info');
                
                // Clear the cart after a short delay to simulate processing
                setTimeout(async () => {
                    try {
                        // Clear cart items (you could also call an API to create an order record)
                        for (const item of cart.items) {
                            await API.removeFromCart(item.productId);
                        }
                        
                        // Show success message
                        showAlert(`Order completed successfully! Total: $${totalAmount.toFixed(2)}. Thank you for your purchase!`, 'success');
                        
                        // Reload cart to show it's empty
                        await loadCart();
                        updateCartCount();
                        
                    } catch (error) {
                        console.error('Error processing order:', error);
                        showAlert('Error processing order. Please try again.', 'danger');
                    }
                }, 1500);
                
            } catch (error) {
                console.error('Error during checkout:', error);
                showAlert('Error starting checkout. Please try again.', 'danger');
            }
        }
        
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alert-container');
            alertContainer.innerHTML = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Auto-dismiss success alerts
            if (type === 'success') {
                setTimeout(() => {
                    const alert = alertContainer.querySelector('.alert');
                    if (alert) {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }
                }, 3000);
            }
        }
    </script>
}
